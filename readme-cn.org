#+TITLE: CLOC: Count Lines of Code
#+AUTHOR: VHQR (https://github.com/vhqr0)
#+OPTIONS: date:nil toc:nil ^:nil
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: article
#+LATEX_HEADER: \usepackage{ctex}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{a4paper,scale=0.9}

一个 Python 实现的基于 Tree Sitter 的 [[https:github.com/AlDanial/cloc][cloc]] 工具：指定一个编程语言和源码路径，在路径中寻找该编程语言的源码，统计文件数、空行数、注释行数和代码行数。

* Features

- 基于 [[https:github.com/tree-sitter][Tree Sitter]] 的 Python 绑定 [[https:github.com/tree-sitter/py-tree-sitter][py-tree-sitter]] 实现多种编程语言代码的准确解析
- 基于 [[https:github.com/chardet/chardet][chardet]] 实现非 ascii/utf-8 文本编码自动检测
- 通过进程池架构绕过 GIL 锁、充分利用多核心 CPU 提高统计效率

* Install

首先安装 Python，推荐通过 [[https:github.com/pyenv/pyenv][pyenv]] 安装最新版的 Python 3.12 以满足依赖要求。

然后安装 Python 依赖： =pip install -r requirements.txt= 。

依赖以下 Python 库：

- hy：[[http:hylang.org][Hylang]] 编程语言编译器和运行环境
- dash-hy：[[https:github.com/vhqr0/dash.hy][dash.hy]] Hy 编程语言基础库（非官方）
- chardet: 猜测二进制内容的文本编码
- tree-sitter: Tree Sitter 的 Python 绑定
- tree-sitter-languages: Tree Sitter 官方的解析器集合，包含 Python、C++、Javascript 等语言


关于 Python 版本：一些依赖指定 Python 3.12，但实际上并不是强制的，如果使用旧版本的 Python，可以添加参数 =--ignore-requires-python= 绕过版本检查。另外，根据 [[https:github.com/tree-sitter/py-tree-sitter/issues/209][issues]]，py-tree-sitter 因为 Python 3.12 移除了一个废弃的内置库影响了部分功能而没有指定 Python 3.12，可以通过前述方法强制安装。

* Usage

#+begin_src bash
  usage: cloc.hy [-h] [-v] [-l LANG] [-T THREADS] src [src ...]

  positional arguments:
    src

  options:
    -h, --help            show this help message and exit
    -v, --verbose
    -l LANG, --lang LANG
    -T THREADS, --threads THREADS
#+end_src

假设一个 cpp 项目的源码存放在 src 和 test，统计命令为： =cloc.hy src test= 。

如果使用其它编程语言，则可以通过 =-l/--lang= 选项指定，例如 ruby 项目： =cloc.hy -l ruby src test= 。

支持的编程语言和对应的文件扩展名如下：

| 编程语言    | 编程语言标识         | 文件扩展名               |
|------------+---------------------+-------------------------|
| python     | python py           | .py                     |
| cpp        | c cc cpp            | .c .cc .cpp             |
| cpp        | h hh hpp            | .h .hh .hpp             |
| cpp        | c+h                 | .c .cc .cpp .h .hh .hpp |
| javascript | javascript js       | .js                     |
| typescript | typescript ts       | .ts .js                 |
| tsx        | tsx jsx             | .ts .js .tsx .jsx       |
| go         | go golang           | .go                     |
| rust       | rust rs             | .rs                     |
| java       | java                | .java                   |
| c_sharp    | c_sharp csharp cs   | .cs                     |
| ruby       | ruby rb             | .rb                     |
| perl       | perl pl             | .pl                     |
| lua        | lua                 | .lua                    |
| haskell    | haskell hs          | .hs                     |
| elisp      | elisp el            | .el                     |

其它参数：

- =-v/--verbose= 控制是否输出日志，用于调试
- =-T/--threads n= 使用 n 个线程（为了绕过 GIL，实际使用进程）进行统计，注意该选项只适用于大型项目，否则进程间通信的开销要远高于计算开销


* Limits

Tree Sitter 限制：首先是进行注释和字符串元素之外的非必要的解析增加了计算量，还可能产生非必要的跨行解析错误（例如 C 宏）导致停止计数；最主要的限制是必须一次性读取所有内容然后才能进行解析，增加了内存占用，限制了能处理的文件的大小。

Python 限制：猜测文本编码、生成 AST 树是计算密集型任务，然而由于 py-tree-sitter 的设计（通过自定义 Python 函数读取代码）不会在生成 AST 树时释放 GIL，因此无法使用线程池架构，只能使用开销更大的进程池架构才能利用多核心 CPU。

* Extends

添加新的编程语言：

首先要引入该语言的解析器。如果该语言在 tree-sitter-languages 中，则无需额外操作。否则应实现 tree-sitter-<lang> 库并修改 cloc.SrcCounter.ts-parser。

然后定义新的源码计数器实例，以 Python 为例：

#+begin_src hy
  (defclass PythonCounter [SrcCounter]
    (setv src-extensions #(".py")
          ts-language "python"
          override-languages #("python" "py")))
#+end_src

其中，src-extensions 决定如何枚举该编程语言的源文件，ts-language 为 Tree Sitter 中该编程语言的标识。文件扩展名和语言标识会被反向索引，以实现通过文件扩展名或语言标识获取对应的类。默认情况下会以 src-extensions 和 ts-language 作为索引，用户可以通过 override-extensions/languages 手动指定索引。此外，还有一个类属性 ts-comment-types 决定哪些节点类型可以视为注释，默认为 =comments= ，在大多数情况下都适用。

* Internal

** Count

1. 首先检查文件大小，如果不超过阈值（默认为 1GB）则继续，读取二进制文件内容。
2. 然后基于 chardet 猜测二进制内容文本编码，然后以该编码将二进制内容解码为字符串。
3. 接着使用 Python 内置的 splitlines 分行，自动检测换行符类型（unix、dos、macos）并转换为 unix 风格的换行符（lf）。
4. 继续使用对应的 Tree Sitter 解析器解析代码得到 AST 树，检查所有节点的类型和区间以确保没有跨行解析错误（否则抛出异常），收集注释区间。
5. 最后根据注释区间判断并统计每行代码的类型（空行、注释行或代码行）。


值得注意的是如果一个文件存在跨行解析错误，那么就会忽略该文件（包括文件计数和行计数），添加参数 =-v= 显示解析失败的文件。

** Multi-Core

添加参数 =-T= 将进入多线程（进程）模式。该模式基于 multiprocessing 提供的进程版的类似 threading 和 queue 的 API。

多线程模式基于两个队列：任务队列和结果队列。主线程在创建完所有子线程后将任务（文件路径）和结束信号（None）添加到任务队列，其中文件路径源是惰性的，任务队列的长度是受到限制的，因此不会一次性地将所有路径加载到内存中。子线程从任务队列中取出任务并更新计数，直到在任务队列中收到退出信号（None），将结果添加到结果队列。最后主线程在结果队列中取出所有计数结果并合并，得到最终结果。
